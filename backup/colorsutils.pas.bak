unit ColorsUtils;

interface
uses
  Graphics, Windows;

type
  THSVColor = record
    Hue: Word;
    Saturation: Word;
    Value: Word;
  end;

  TRGBColor = record
    Red: Byte;
    Green: Byte;
    Blue: Byte;
  end;

{
  TColor converting functions
}
function TColorToRGBColor(const Color: TColor): TRGBColor;
function TColorToHSVColor(const Color: TColor): THSVColor;
procedure TColorToHSV(const color: TColor; out h, s, v: Integer);

{
  RGBColor converting functions
}
function RGBColorToColor(const Color: TRGBColor): TColor;

{
  RGB variables converting functions
}
function RGBToRGBColor(const r, g, b: Byte): TRGBColor;

{
  HSVColor converting functions
}
function HSVColorToColor(hsvColor: THSVColor): TColor;

{
  HSV variables converting functions
}
function HSVToHSVColor(const h, s, v: integer): THSVColor;
function HSVToColor(const h, s, v: Integer): TColor;

{
  Converting RGB<->HSV functions
}
function HSVColortoRGBColor(const hsvColor: THSVColor): TRGBColor;
function RGBColorToHSVColor(const Color: TRGBColor): THSVColor;

{
  Other functions
}
function equalColors(color1, color2: TColor): Boolean;

implementation

function TColorToRGBColor(const Color: TColor): TRGBColor;
var
  r, g, b: Byte;
begin
  r := GetRValue(Color);
  g := GetGValue(Color);
  b := GetBValue(Color);

  Result := RGBToRGBColor(r, g, b);
end { TColorToRGBColor };

function TColorToHSVColor(const Color: TColor): THSVColor;
var
  h, s, v: Integer;
begin
  TColorToHSV(Color, h, s, v);
  Result := HSVToHSVColor(h, s, v);
end { TColorToHSVColor };

procedure TColorToHSV(const color: TColor; out h, s, v: Integer);
var
  hsvColor: THSVColor;
begin
  hsvColor := RGBColorToHSVColor(TColorToRGBColor(color));

  h := hsvColor.Hue;
  s := Round((hsvColor.Saturation * 100) / 255);
  v := Round((hsvColor.Value * 100) / 255);
end { TColorToHSV };

function RGBColorToColor(const Color: TRGBColor): TColor;
begin
  Result := RGB(Color.Red, Color.Green, Color.Blue);
end { RGBColorToColor};

function RGBToRGBColor(const r, g, b: Byte): TRGBColor;
begin
  with Result do begin
    Red := r;
    Green := g;
    Blue := b;
  end;
end { RGBToRGBColor };

function HSVColorToColor(hsvColor: THSVColor): TColor;
begin
  Result := HSVToColor(hsvColor.Hue, hsvColor.Saturation, hsvColor.Value);
end { HSVColorToColor };

function HSVToHSVColor(const h, s, v: integer): THSVColor;
begin
  with Result do begin
    Hue := h;
    Saturation := s;
    Value := v;
  end;
end { HSVToHSVColor };

function HSVToColor(const h, s, v: Integer): TColor;
var
  St, Vt: Integer;
  hsvColor: THSVColor;
begin
  St := Round((S * 255) / 100);
  Vt := Round((V * 255) / 100);

  hsvColor := HSVToHSVColor(H, St, Vt);
  Result := RGBColorToColor(HSVColortoRGBColor(hsvColor));
end { HSVToColor };

{
  Floating point fractions, 0..1, replaced with integer values, 0..255.
  Use integer conversion ONLY for one-way, or a single final conversions.
  Use floating-point for converting reversibly (see HSVtoRGB above).

  H = 0 to 360 (corresponding to 0..360 degrees around hexcone)
      0 (undefined) for S = 0
  S = 0 (shade of gray) to 255 (pure color)
  V = 0 (black) to 255 (white)
}
function HSVColortoRGBColor(const hsvColor: THSVColor): TRGBColor;
const
  divisor: Integer = 255*60;
var
  f: Integer;
  hTemp: Integer;
  p, q, t: Integer;
  VS: Integer;
begin
  if hsvColor.Saturation = 0 then
    Result := RGBtoRGBColor(hsvColor.Value, hsvColor.Value, hsvColor.Value)  // achromatic:  shades of gray
  else begin                                                                 // chromatic color
    if hsvColor.Hue = 360 then
      hTemp := 0
    else
      hTemp := hsvColor.Hue;

    f := hTemp MOD 60;      // f is IN [0, 59]
    hTemp := hTemp DIV 60;  // h is now IN [0,6)

    VS := hsvColor.Value * hsvColor.Saturation;
    p := hsvColor.Value - VS DIV 255;                 // p = v * (1 - s)
    q := hsvColor.Value - (VS * f) DIV divisor;         // q = v * (1 - s*f)
    t := hsvColor.Value - (VS * (60 - f)) DIV divisor;  // t = v * (1 - s * (1 - f))

    case hTemp of
      0:   Result := RGBtoRGBColor(hsvColor.Value, t, p);
      1:   Result := RGBtoRGBColor(q, hsvColor.Value, p);
      2:   Result := RGBtoRGBColor(p, hsvColor.Value, t);
      3:   Result := RGBtoRGBColor(p, q, hsvColor.Value);
      4:   Result := RGBtoRGBColor(t, p, hsvColor.Value);
      5:   Result := RGBtoRGBColor(hsvColor.Value, p, q);
      else Result := RGBtoRGBColor(0, 0, 0)   // should never happen;
                                              // avoid compiler warning
    end;
  end;
end { HSVColortoRGBColor };


{
  RGB, each 0 to 255, to HSV.
    H = 0 to 360 (corresponding to 0..360 degrees around hexcone)
    S = 0 (shade of gray) to 255 (pure color)
    V = 0 (black) to 255 (white)

  Based on C Code in "Computer Graphics -- Principles and Practice,"
  Foley et al, 1996, p. 592.  Floating point fractions, 0..1, replaced with
  integer values, 0..255.
}
function RGBColorToHSVColor(const Color: TRGBColor): THSVColor;
var
  Delta: Integer;
  Minimum: Integer;
  hsvColor: THSVColor;
begin
  with Color do begin
    Minimum := Min(Min(Red, Green), Blue);
    hsvColor.Value := Max(Max(Red, Green), Blue);
  end;

  Delta := hsvColor.Value - Minimum;

  // Calculate saturation:  saturation is 0 if r, g and b are all 0
  if hsvColor.Value = 0 then
    hsvColor.Saturation := 0
  else
    hsvColor.Saturation := MulDiv(Delta, 255, hsvColor.Value); {MulDiv(a, b, c) = (a * b) div c)}

  if hsvColor.Saturation  = 0 then
    hsvColor.Hue := 0   // Achromatic:  When s = 0, h is undefined but assigned the value 0
  else begin            // Chromatic

    with Color do
    begin
      if Red = hsvColor.Value then  // degrees -- between yellow and magenta
        hsvColor.Hue := MulDiv(Green - Blue, 60, Delta)
      else begin
        if Green = hsvColor.Value then // between cyan and yellow
          hsvColor.Hue := 120 + MulDiv(Blue - Red, 60, Delta)
        else begin
          if  Blue = hsvColor.Value then // between magenta and cyan
            hsvColor.Hue := 240 + MulDiv(Red - Green, 60, Delta);
        end;
      end;
    end;

    if hsvColor.Hue < 0 then
      hsvColor.Hue := hsvColor.Hue + 360;
  end;

  Result := hsvColor;
end { RGBColorToHSVColor };

function equalColors(color1, color2: TColor): Boolean;
var
  rgbColor1, rgbColor2: TRGBColor;
begin
  rgbColor1 := TColorToRGBColor(color1);
  rgbColor2 := TColorToRGBColor(color2);

  if ((rgbColor1.Red = rgbColor2.Red) AND
      (rgbColor1.Green = rgbColor2.Green) AND
      (rgbColor2.Blue = rgbColor2.Blue)) then
    Result := True
  else
    Result := False;
end { equalColors };

end.
